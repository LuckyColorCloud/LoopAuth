{
  "route": "/blog",
  "doc": "博文权限限制示例",
  "err": "您无权访问此博客 10001",
  "id": 1,
  "policy": [
    {
      "type": "general",
      "equal": [
        "subject.loginId 1 ERR:(作者未开放权限给您 10003)",
        "subject.vipType 2 ERR:(本文章会员才可访问 10004)"
      ],
      "intLess": [
        "contextual.nowTime 1000000000 ERR:(非法时间访问 10005)"
      ]
    }
  ]
}




{
  "Version": "2012-10-17", 版号
  "Statement": {  声明
    "Effect": "Allow",  作用 允许/拒绝
    "Action": "Blog:Get",  操作对象和方式
    "Policy": { 政策主体
      "Resource": "arn:aws:blog:us-east-1:123456789012:blog/123456789012/*", 资源
      "Condition": { 条件
        "DateLessThan": {"aws:CurrentTime": "2019-12-31T12:00:00Z"}  当前时间小于
      }
    }
  }
}








欢迎观看本期视频，今天我们要介绍一种在Web服务中验证用户身份和权限的方法，叫做鉴权。

什么是鉴权呢？简单来说，就是通过一定的机制来确认用户是否有合法的身份和足够的权限来访问Web服务中的资源。例如，你想要查看某个网站上的个人信息或者购物车等内容，就需要先登录并通过鉴权。

那么，在Web服务中如何实现鉴权呢？我们以若依项目为例来说明一下。若依项目是一个基于Spring Boot开发的后台管理系统，它使用了基于Token和Redis的鉴权方案。

其认证鉴权流程大致为[^1^][4]：

- 用户输入用户名密码登录；
- 系统校验用户名密码是否正确；
- 生成uuid作为token返回给用户，并存储到redis；
- 查询用户拥有的角色和权限并存储到redis；
- 请求资源的时候将token转化为userId、userName存储到请求头中；
- 根据 token 查询redis缓存中的权限并和目标资源上标注的权限名称做比对，比对成功即鉴权成功。

这样做有哪些优点呢？

- Token不依赖Cookie，可以跨域访问，并且支持移动端；
- Token不包含敏感信息，只是一个随机字符串，并且有有效期限制；
- Redis可以提高查询效率，并且可以实现分布式缓存和集群部署；
- 可以灵活地控制用户角色和权限，并且可以随时修改或撤销；

以上就是本期视频介绍关于鉴权流程的内容。希望对大家有所帮助。如果想了解更多关于鉴权相关知识，请参考以下链接[^2^][1] [^3^][2] [^4^][3] 。谢谢大家观看！